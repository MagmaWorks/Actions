name: On Merge to Main -- Package and create/update draft release

on:
  workflow_call:
    inputs:
      codecov:
        description: 'Upload code coverage to codecov.io'
        type: boolean
        default: true
        required: false
        
jobs:
  build_test_package:
    name: Build, test, package and create release
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        filter: tree:0
    
    - name: Build
      run: dotnet build --configuration Release
    
    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

    - name: Upload coverage reports to workflow as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage
    
    - name: Package
      run: dotnet pack --configuration Release --no-restore -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg /p:DebugType=portable /property:Configuration=Debug

    - name: Get version from Package name
      id: get_version
      shell: pwsh
      run: |
        $fullVersion = [array]$($(Get-ChildItem -recurse -Filter *.nupkg | Select-Object -First 1).Name -split '(?=\d)',2)[1].replace('.nupkg','').replace('-preview','').split('.')
        $majorVersion = [string]$fullVersion[0]
        $minorVersion = [string]$fullVersion[1]
        $patchVersion = [string]$fullVersion[2]
        $buildVersion = [string]$fullVersion[3]
        $versionBuildTag = $majorVersion + "." + $minorVersion + "." + $patchVersion + "." + $buildVersion
        echo "BUILD=$versionBuildTag" >> $env:GITHUB_OUTPUT
        echo "Build version: $versionBuildTag"

    - name: Create and push new Major.Minor.Patch.Build tag
      run: |
        git tag ${{ steps.get_version.outputs.BUILD }}
        git push origin ${{ steps.get_version.outputs.BUILD }}
      
    - name: Create new draft release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "./**/*.*nupkg"
        tag: "${{ steps.get_version.outputs.BUILD }}"
        draft: true
        allowUpdates: true
        updateOnlyUnreleased: true

  codecov-upload:
    name: Upload coverage reports to codecov.io
    if: inputs.codecov == true
    needs: build_test_package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Download coverage reports from workflow artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage

      - name: Upload coverage reports to codecov.io
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          directory: coverage
