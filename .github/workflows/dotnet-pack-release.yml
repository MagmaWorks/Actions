name: Package and create draft release .NET

on:
  workflow_call:
    inputs:
      dotnet:
        description: "Setup a specific dotnet version"
        type: string
        required: false

jobs:
  package:
    name: Package
    runs-on: ubuntu-latest
    outputs:
      version-tag: ${{ steps.get_version.outputs.VERSION_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Setup dotnet
        if: ${{ inputs.dotnet != '' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet }}
      
      - name: Package
        run: |
          dotnet pack --configuration Release \
            -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg \
            /p:DebugType=portable /property:Configuration=Debug

      - name: Rename packages and get version tag
        id: get_version
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Recurse -Include *.nupkg,*.snupkg | Select-Object -First 1
          if (-not $pkg) { throw "No package found" }

          # Rename to remove -preview
          $newName = $pkg.Name -replace '-preview',''
          if ($pkg.Name -ne $newName) {
            Rename-Item $pkg.FullName $newName
          }

          # Parse version from renamed name
          if ($newName -match '\d+\.\d+\.\d+(\.(\d+))?') {
              $parts = $matches[0] -split '\.'
              $major = $parts[0]
              $minor = $parts[1]
              $patch = $parts[2]
              $build = if ($parts.Length -ge 4) { $parts[3] } else { 0 }
          } else {
              throw "Could not parse version from package name: $newName"
          }

          $versionTag = "$major.$minor.$patch.$build"
          echo "VERSION_TAG=$versionTag" >> $env:GITHUB_OUTPUT
          echo "Version tag: $versionTag"

      - name: Create draft release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            ./**/*.nupkg
            ./**/*.snupkg
          tag: "${{ steps.get_version.outputs.VERSION_TAG }}"
          draft: true
          allowUpdates: true
          updateOnlyUnreleased: true
