name: Lint, Build and Test .NET

on:
  workflow_call:
    inputs:
      lint:
        type: boolean
        default: true
      dotnet:
        type: string
        required: false

jobs:
  Build-Test:
    runs-on: ubuntu-latest
    outputs:
      coverage-artifact: coverage
      sha: ${{ steps.record-sha.outputs.sha }}
      
    steps:
      - name: Record SHA
        id: record-sha
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let sha;
            if (context.eventName === "pull_request") {
              sha = context.payload.pull_request.head.sha;
            } else if (context.eventName === "issue_comment") {
              // Fetch PR info from the issue comment
              const pr_number = context.payload.issue.number;
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
              });
              sha = pr.head.sha;
            } else {
              sha = context.sha;
            }
            core.setOutput("sha", sha);
      
      - name: Find CI check run
        id: find-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "${{ steps.record-sha.outputs.sha }}", // use recorded SHA
            });

            console.log("All check run names for this ref:");
            for (const run of data.check_runs) {
              console.log(`- id=${run.id}, name=${run.name}, status=${run.status}, conclusion=${run.conclusion}`);
            }
            
            const check = data.check_runs.find(c => c.name === "CI");
            if (!check) {
              core.setFailed("No existing check run named 'CI' found.");
            } else {
              core.setOutput("check_id", check.id);
            }
      
      - name: Update GitHub Check (in progress)
        id: update-check
        uses: LouisBrunner/checks-action@v1.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.find-check.outputs.check_id }}
          status: "in_progress"
          sha: ${{ steps.record-sha.outputs.sha }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        if: ${{ inputs.dotnet != '' }}
        with:
          dotnet-version: ${{ inputs.dotnet }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Run Lint and push fixes
        if: github.event_name == 'pull_request' && inputs.lint == true
        id: lint-check
        uses: wearerequired/lint-action@v2
        with:
          auto_fix: true
          dotnet_format: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build solution
        run: dotnet build ${{ inputs.solution-path }} --configuration Release

      - name: Test projects
        run: |
          dotnet test ${{ inputs.solution-path }} \
            --configuration Release \
            --no-build \
            --no-restore \
            --collect:"XPlat Code Coverage" \
            --logger trx \
            --results-directory coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
