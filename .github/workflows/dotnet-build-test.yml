name: Lint, Build and Test .NET

on:
  workflow_call:
    inputs:
      lint:
        type: boolean
        default: true
      dotnet:
        type: string
        required: false

jobs:
  Setup-Status:
    runs-on: ubuntu-latest
    outputs:
      sha_original: ${{ steps.set-sha.outputs.sha_original }}
    steps:
      - name: Determine initial SHA
        id: set-sha
        run: |
          # For PRs, use head_sha; for pushes, use github.sha
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            echo "sha_original=$(jq -r .pull_request.head.sha < $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT
          else
            echo "sha_original=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Set in-progress status on original SHA
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = "${{ steps.set-sha.outputs.sha_original }}";
            await github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha,
              state: 'pending',
              context: 'CI',
              description: 'Workflow started'
            });

  Build-Test:
    runs-on: ubuntu-latest
    outputs:
      coverage-artifact: coverage

    steps:
      # Determine commit SHA to be able to update status
      - name: Determine commit SHA
        id: head_sha
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "issue_comment" ]; then
            export HEAD_SHA=$(gh pr view ${{ github.event.issue.number }} --json headRefName -q .headRefName)
            git fetch origin $HEAD_SHA
            export HEAD_SHA=$(git rev-parse origin/$HEAD_SHA)
          else
            export HEAD_SHA=${GITHUB_SHA}
          fi
          echo "HEAD_SHA=$HEAD_SHA" >> $GITHUB_OUTPUT

      
      - name: Set initial workflow status
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${{ steps.head_sha.outputs.HEAD_SHA }} \
            -d '{"state":"pending","context":"CI / Lint / Build","description":"Workflow started"}'

      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        if: ${{ inputs.dotnet != '' }}
        with:
          dotnet-version: ${{ inputs.dotnet }}

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Lint (only on PRs if lint input is true) and comment if fixes were pushed
      - name: Run Lint and push fixes
        if: github.event_name == 'pull_request' && inputs.lint == true
        id: lint-check
        uses: wearerequired/lint-action@v2
        with:
          auto_fix: true
          dotnet_format: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment "ci" and stop run if lint pushed changes
        if: github.event_name == 'pull_request' && inputs.lint == true
        run: |
          if [ "$(git rev-parse HEAD)" != "${{ github.event.pull_request.head.sha }}" ]; then
            echo "Lint pushed changes, commenting 'ci' on PR #${{ github.event.pull_request.number }}"
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
              -f body='ci'
            echo "Stopping workflow"
            exit 78
          else
            echo "No changes from lint"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build and restore solution
      - name: Build solution
        run: dotnet build ${{ inputs.solution-path }} --configuration Release

      # Test and collect coverage
      - name: Test projects
        run: |
          dotnet test ${{ inputs.solution-path }} \
            --configuration Release \
            --no-build \
            --no-restore \
            --collect:"XPlat Code Coverage" \
            --logger trx \
            --results-directory coverage

      # Upload coverage for downstream jobs
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
