name: Push NuGet from Release

on:
  workflow_call:
    secrets:
      NUGET_API_KEY:
        required: true

jobs:
  Release-NuGet-Packages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download release assets
        run: gh release download ${{ github.event.release.tag_name }} --dir ./artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Strip build number, update nuspec, rezip, and tag git
        id: rename
        shell: pwsh
        env:
          GITHUB_PRERELEASE: ${{ github.event.release.prerelease }}
        run: |
          $artifacts = Get-ChildItem -Path ./artifacts -File | Where-Object { $_.Name -match '\.(s|)nupkg$' }
          if (-not $artifacts) { Write-Error "No packages found in ./artifacts"; exit 1 }
      
          $suffix = if ($env:GITHUB_PRERELEASE -eq 'true') { '-beta' } else { '' }
          $newTag = $null
      
          foreach ($pkg in $artifacts) {
            Write-Host "Processing $($pkg.Name)..."
      
            # Match name like: <prefix><Major.Minor.Patch>.<Build><ext>
            if ($pkg.Name -notmatch '(.*?)(\d+\.\d+\.\d+)\.\d+(\..*)') {
              Write-Warning "Skipping file (pattern mismatch): $($pkg.Name)"
              continue
            }
      
            $prefix = $matches[1]            # e.g., MagmaWorks.Uncertainties.
            $majorMinorPatch = $matches[2]   # e.g., 0.0.12
            $ext = $matches[3]               # .nupkg or .snupkg
            if (-not $newTag) { $newTag = $majorMinorPatch }
      
            # Work folder next to the file
            $work = Join-Path $pkg.DirectoryName ([IO.Path]::GetFileNameWithoutExtension($pkg.Name))
            if (Test-Path $work) { Remove-Item $work -Recurse -Force }
            New-Item -ItemType Directory -Path $work | Out-Null
      
            # Unzip -> edit nuspec version -> rezip
            Expand-Archive -Path $pkg.FullName -DestinationPath $work -Force
            Remove-Item $pkg.FullName -Force
      
            $nuspec = Get-ChildItem $work -Filter *.nuspec | Select-Object -First 1
            if (-not $nuspec) { Write-Error "No .nuspec inside $($pkg.Name)"; exit 1 }
      
            [xml]$xml = Get-Content $nuspec.FullName
            # Replace "-preview.<build>" with either "" (release) or "-beta" (pre-release)
            $xml.package.metadata.version = ($xml.package.metadata.version -replace '-preview\.\d+', $suffix)
            $xml.Save($nuspec.FullName)
      
            # Recreate the package (keep .nupkg/.snupkg extension and add -beta in filename if needed)
            $outName = "$prefix$majorMinorPatch$($suffix)$ext"
            $dest = Join-Path $pkg.DirectoryName $outName
            if (Test-Path $dest) { Remove-Item $dest -Force }
            Compress-Archive -Path (Join-Path $work '*') -DestinationPath $dest -Force
      
            # Clean up
            Remove-Item $work -Recurse -Force
          }
      
          if (-not $newTag) { Write-Error "Could not determine version tag"; exit 1 }
      
          "VERSION_TAG=$newTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          Write-Host "Repacked packages, updated nuspec, stripped build numbers. Version tag: $newTag"
      
          # Git tag
          git tag $newTag
          git push origin $newTag

      - name: Push to NuGet
        run: |
          dotnet nuget push "./artifacts/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Update release with renamed packages
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ github.event.release.tag_name }}"
          artifacts: "./artifacts/*.*"
          draft: false
          makeLatest: true
          allowUpdates: true
          removeArtifacts: true
          updateOnlyUnreleased: false
          generateReleaseNotes: true
          name: "${{ steps.rename.outputs.VERSION_TAG }}"

      - name: Delete previous draft releases
        uses: hugo19941994/delete-draft-releases@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
