name: Push NuGet from Release

on:
  workflow_call:
    secrets:
      NUGET_API_KEY:
        required: true
      GITHUB_TOKEN:
        required: true

jobs:
  Push-NuGet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download release assets
        run: gh release download ${{ github.event.release.tag_name }} --dir ./artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Strip build number and compute version tag
        id: rename
        shell: pwsh
        run: |
          $pkgFiles = Get-ChildItem -Recurse -Path ./artifacts -Include *.nupkg, *.snupkg

          if ($pkgFiles.Count -eq 0) {
              Write-Error "No NuGet packages found in ./artifacts"
              exit 1
          }

          $newTag = ""
          foreach ($pkg in $pkgFiles) {
              # Match version: Major.Minor.Patch.Build
              if ($pkg.Name -match '(\d+\.\d+\.\d+)\.\d+(\..*)') {
                  $majorMinorPatch = $matches[1]
                  $suffix = $matches[2] # e.g., .nupkg or .snupkg
                  $newName = "$majorMinorPatch$suffix"
                  $newPath = Join-Path $pkg.DirectoryName $newName
                  Rename-Item $pkg.FullName $newPath -Force
                  if (-not $newTag) {
                      $newTag = $majorMinorPatch
                  }
              } else {
                  Write-Warning "Skipping file (does not match expected pattern): $($pkg.Name)"
              }
          }

          if (-not $newTag) {
              Write-Error "Failed to determine version tag from packages."
              exit 1
          }

          echo "VERSION_TAG=$newTag" >> $env:GITHUB_OUTPUT
          echo "Renamed packages. Version tag: $newTag"

      - name: Push to NuGet
        run: dotnet nuget push "./artifacts/*.*nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Update release with renamed packages
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ steps.rename.outputs.VERSION_TAG }}"
          artifacts: "./artifacts/*.*"
          draft: false
          makeLatest: true
          allowUpdates: true
          removeArtifacts: true
          updateOnlyUnreleased: false

      - name: Delete previous draft releases
        uses: hugo19941994/delete-draft-releases@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
